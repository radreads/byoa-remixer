import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import type { Database } from '../lib/supabase';

export type SavedTweet = Database['public']['Tables']['saved_tweets']['Row'];

export const useSavedTweets = () => {
  const [savedTweets, setSavedTweets] = useState<SavedTweet[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Fetch saved tweets on mount
  useEffect(() => {
    console.log('Fetching saved tweets...');
    fetchSavedTweets();
  }, []);

  const fetchSavedTweets = async () => {
    try {
      const { data, error } = await supabase
        .from('saved_tweets')
        .select('*')
        .order('saved_at', { ascending: false });

      if (error) throw error;
      console.log('Fetched tweets:', data);
      setSavedTweets(data || []);
    } catch (err) {
      console.error('Error fetching saved tweets:', err);
      setError(err instanceof Error ? err.message : 'Failed to fetch saved tweets');
    } finally {
      setLoading(false);
    }
  };

  const saveTweet = async (tweet: { id: string; content: string; articleContext?: string }) => {
    try {
      setLoading(true);
      console.log('Attempting to save tweet with data:', {
        id: tweet.id,
        content: tweet.content,
        articleContext: tweet.articleContext
      });
      
      // Check if tweet already exists
      const exists = savedTweets.some(t => t.tweet_id === tweet.id);
      if (exists) {
        console.log('Tweet already exists, skipping save');
        return;
      }

      // Match the database schema exactly:
      // - id: uuid (auto-generated by Supabase)
      // - tweet_id: text
      // - content: text
      // - article_context: text (nullable)
      // - saved_at: timestamptz (auto-generated by Supabase)
      const insertData = {
        tweet_id: tweet.id,
        content: tweet.content,
        article_context: tweet.articleContext || null
      };
      console.log('Inserting data into Supabase:', insertData);

      const { data, error } = await supabase
        .from('saved_tweets')
        .insert(insertData)
        .select()
        .single();

      if (error) {
        console.error('Supabase error details:', {
          code: error.code,
          message: error.message,
          details: error.details,
          hint: error.hint,
          insertData
        });
        throw error;
      }
      
      console.log('Successfully saved tweet:', data);
      if (data) {
        setSavedTweets(prev => [data, ...prev]);
        // Refetch to ensure we have the latest data
        await fetchSavedTweets();
      }
    } catch (err) {
      console.error('Error saving tweet:', err);
      setError(err instanceof Error ? err.message : 'Failed to save tweet');
    } finally {
      setLoading(false);
    }
  };

  const removeTweet = async (id: string) => {
    try {
      console.log('Attempting to remove tweet:', id);
      const { error } = await supabase
        .from('saved_tweets')
        .delete()
        .eq('id', id);

      if (error) throw error;
      console.log('Successfully removed tweet:', id);
      setSavedTweets(prev => prev.filter(tweet => tweet.id !== id));
    } catch (err) {
      console.error('Error removing tweet:', err);
      setError(err instanceof Error ? err.message : 'Failed to remove tweet');
    }
  };

  return {
    savedTweets,
    saveTweet,
    removeTweet,
    loading,
    error
  };
}; 